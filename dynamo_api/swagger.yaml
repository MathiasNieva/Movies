
openapi: 3.0.0

paths:
  /movies/{movie_id}:
    get:
      summary: returns movie info
      parameters:
        - name: movie_id
          in: path
          required: true
          description: Movie unique id
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getMovie/invocations"
        httpMethod: "POST"
    put:
      summary: Saves movie info
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                genre:
                  type: string
                year:
                  type: string
      parameters:
        - name: movie_id
          in: path
          required: true
          description: Movie unique id
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:putMovie/invocations"
        httpMethod: "POST"
        
  /roomsPerDay/movie/{movie_id}:
    get:
      summary: Returns movie info
      parameters:
        - name: movie_id
          in: path
          required: true
          description: movie unique id
        - name: date
          in: query
          schema:
            type: string
          description: date of movie
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getRoomsPerDay/invocations"
        httpMethod: "POST"
    put:
      summary: Saves movie info
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                room_id:
                  type: string
                schedule:
                  type: array
                  items:
                    type: string
      parameters:
        - name: movie_id
          in: path
          required: true
          description: Movie unique id
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:putRoomsPerDay/invocations"
        httpMethod: "POST"
        
  /movies/{movie_id}/room/{room_id}:
    get:
      summary: returns movie info
      parameters:
        - name: movie_id
          in: path
          required: true
          description: Movie unique id
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getMovieRoom/invocations"
        httpMethod: "POST"
    put:
      summary: Saves movie info
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                person_id:
                  type: string
      parameters:
        - name: movie_id
          in: path
          required: true
          description: Movie unique id
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:putMovieRoom/invocations"
        httpMethod: "POST"
    
        
  /room/{room_id}:
    get:
      summary: returns movie info
      parameters:
        - name: room_id
          in: path
          required: true
          description: Room id
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getRoom/invocations"
        httpMethod: "POST"
    put:
      summary: Saves movie info
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                info:
                  type: string
                seats:
                  type: string
                threeD:
                  type: string
      parameters:
        - name: room_id
          in: path
          required: true
          description: Movie unique id
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:putRoom/invocations"
        httpMethod: "POST"
        
  /person/{person_id}:
    get:
      summary: returns movie info
      parameters:
        - name: person_id
          in: path
          required: true
          description: Movie unique id
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getPerson/invocations"
        httpMethod: "POST"
    put:
      summary: Saves movie info
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                movie_id:
                  type: string
      parameters:
        - name: person_id
          in: path
          required: true
          description: Movie unique id
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:putPerson/invocations"
        httpMethod: "POST"

